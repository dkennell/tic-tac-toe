c
o_won = contains_subarray(board_slots_with_o, combo)
board_slots_with_o = board_slot_numbers_containing_a_given_value("O")
combo = WIN_COMBINATIONS[6]
WIN_COMBINATIONS
c
1
c
combo
board_slots_with_x
y_won = contains_subarray(board_slots_with_x, combo)
combo = WIN_COMBINATIONS[4]
board_slots_with_y = board_slot_numbers_containing_a_given_value("O")
WIN_COMBINATIONS
c
WIN_COMBINATIONS
board_slots_with_y = board_slot_numbers_containing_a_given_value("O")
board_slots_with_x = board_slot_numbers_containing_a_given_value("X")
c
exit
c
exit
exirt
c
x
@current_player
  @player_token
exit
c
board
c
board
c
9
c
WIN_COMBINATIONS
    board_slots_with_y = board_slot_numbers_containing_a_given_value(board, "O")
    board_slots_with_x = board_slot_numbers_containing_a_given_value(board, "X")
game_won(board)
game_over?(board)
c
2
exit
exi
board_slots_with_y = board_slot_numbers_containing_a_given_value(board, "Y")
board_slots_with_x = board_slot_numbers_containing_a_given_value(board, "X")
board_slot_numbers_containing_a_given_value(board, "X")
false || nil
game_won(board)
game_over?(board)
def game_over?(board)
board
c
board
exit
a = board[player_move_number - 1] = token
c
game_not_over?
token
c
!validate_token_choice(token)
validate_token_choice(token)
token
